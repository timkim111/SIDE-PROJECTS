
these are ideas

method 1:
1. find # of each character in a large file like shakespeare.txt
2. save as a file of number of characters per character
3. multiply length of morse code letters by number of characters for each and sum for each letters and emit for the mapper per potential table
4. in the reducer, start initial "guess" at the # of characters when using standard morse code then replace with lower ones for each key
5. return the dictionary that was the lowest

method 1.1:
1. Mapper:
    - takes in a large text file
    - emits for each line:
        - key: character
        - value: # of character instances in line

2. Reducer:
    - sums up all of the key value pairs for each character and forms a dictionary with each character and # of instances in the whole file as value NAME: instance_tab
    - use user defined randomize function to get the iterator named perms; perms values are chars keys are # of chars in morsecode (needs to be implemented slightly)
    - loops through perms:
        - sums the total number of characters by multiplying with instance_tab with the perms
        - has init guess as the standard morse code
        - updates guess with lower values while iterating through perms
    - return guess, which will be the lowest at that point

tim@tim-Linux:~/Desktop/pfiles/morseopt$ cat the_tempest.txt | ./morseopt4.py | sort | ./morsereduce2.py
'standard morse code'   288280
tim@tim-Linux:~/Desktop/pfiles/morseopt$ cat shakespeare.txt | ./morseopt4.py | sort | ./morsereduce2.py
'standard morse code'   14515793

######################################

'Original morse code used this many lines'  222551
^C'The most efficient discovered morse code is' 213484
'The table for this was'    {'p': ('.--. ', 5), 'q': ('--.- ', 5), 'r': ('.-. ', 4), 's': ('... ', 4), 't': ('- ', 2), 'u': ('..- ', 4), 'v': ('...- ', 5), 'w': ('.-- ', 4), 'x': ('-..- ', 5), 'y': ('-.-- ', 5), 'z': ('--.. ', 5), 'a': ('._ ', 3), 'b': ('-... ', 5), 'c': ('-.-. ', 5), 'd': ('-.. ', 4), 'e': ('. ', 2), 'f': ('..-. ', 5), 'g': ('.... ', 5), 'h': ('.. ', 3), 'i': ('--. ', 4), 'j': ('.--- ', 5), 'k': ('.-.. ', 5), 'l': ('-.- ', 4), 'm': ('--- ', 4), 'n': ('-- ', 3), 'o': ('-, ', 3)}

